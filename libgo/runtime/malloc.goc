// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// See malloc.h for overview.
//
// TODO(rsc): double-check stats.

package runtime
#include <stddef.h>
#include <errno.h>
#include <stdlib.h>
#include "go-alloc.h"
#include "runtime.h"
#include "malloc.h"
#include "go-string.h"
#include "interface.h"
#include "go-type.h"
typedef struct __go_interface* Eface;
typedef struct __go_type_descriptor Type;
typedef struct __go_func_type FuncType;

MHeap mheap;
MStats mstats;

extern volatile int32 MemProfileRate
  __asm__ ("libgo_runtime.runtime.MemProfileRate");

// Same algorithm from chan.c, but a different
// instance of the static uint32 x.
// Not protected by a lock - let the threads use
// the same random number if they like.
static uint32
fastrand1(void)
{
	static uint32 x = 0x49f6428aUL;

	x += x;
	if(x & 0x80000000L)
		x ^= 0x88888eefUL;
	return x;
}

// Allocate an object of at least size bytes.
// Small objects are allocated from the per-thread cache's free lists.
// Large objects (> 32 kB) are allocated straight from the heap.
void*
mallocgc(uintptr size, uint32 refflag, int32 dogc, int32 zeroed)
{
	int32 sizeclass, rate;
	MCache *c;
	uintptr npages;
	MSpan *s;
	void *v;
	uint32 *ref;

	if(!__sync_bool_compare_and_swap(&m->mallocing, 0, 1))
		throw("malloc/free - deadlock");
	if(size == 0)
		size = 1;

	mstats.nmalloc++;
	if(size <= MaxSmallSize) {
		// Allocate from mcache free lists.
		sizeclass = SizeToClass(size);
		size = class_to_size[sizeclass];
		c = m->mcache;
		v = MCache_Alloc(c, sizeclass, size, zeroed);
		if(v == nil)
			throw("out of memory");
		mstats.alloc += size;
		mstats.total_alloc += size;
		mstats.by_size[sizeclass].nmalloc++;

		if(!mlookup(v, nil, nil, nil, &ref)) {
			printf("malloc %lld; mlookup failed\n", (long long)size);
			throw("malloc mlookup");
		}
		*ref = RefNone | refflag;
	} else {
		// TODO(rsc): Report tracebacks for very large allocations.

		// Allocate directly from heap.
		npages = size >> PageShift;
		if((size & PageMask) != 0)
			npages++;
		s = MHeap_Alloc(&mheap, npages, 0, 1);
		if(s == nil)
			throw("out of memory");
		size = npages<<PageShift;
		mstats.alloc += size;
		mstats.total_alloc += size;
		v = (void*)(s->start << PageShift);

		// setup for mark sweep
		s->gcref0 = RefNone | refflag;
		ref = &s->gcref0;
	}

	__sync_bool_compare_and_swap(&m->mallocing, 1, 0);

	if(__sync_bool_compare_and_swap(&m->gcing, 1, 0))
		__go_run_goroutine_gc(0);

	if(!(refflag & RefNoProfiling) && (rate = MemProfileRate) > 0) {
		if(size >= (uint32) rate)
			goto profile;
		if((uint32) m->mcache->next_sample > size)
			m->mcache->next_sample -= size;
		else {
			// pick next profile time
			if(rate > 0x3fffffff)	// make 2*rate not overflow
				rate = 0x3fffffff;
			m->mcache->next_sample = fastrand1() % (2*rate);
		profile:
			*ref |= RefProfiled;
			MProf_Malloc(v, size);
		}
	}

	if(dogc && mstats.heap_alloc >= mstats.next_gc)
		gc(0);
	return v;
}

void*
__go_alloc(uintptr size)
{
	return mallocgc(size, 0, 1, 1);
}

// Free the object whose base pointer is v.
void
__go_free(void *v)
{
	int32 sizeclass, size;
	MSpan *s;
	MCache *c;
	uint32 prof, *ref;

	if(v == nil)
		return;

	if(!__sync_bool_compare_and_swap(&m->mallocing, 0, 1))
		throw("malloc/free - deadlock");

	if(!mlookup(v, nil, nil, &s, &ref)) {
		printf("free %p: not an allocated block\n", v);
		throw("free mlookup");
	}
	prof = *ref & RefProfiled;
	*ref = RefFree;

	// Find size class for v.
	sizeclass = s->sizeclass;
	if(sizeclass == 0) {
		// Large object.
		if(prof)
			MProf_Free(v, s->npages<<PageShift);
		mstats.alloc -= s->npages<<PageShift;
		runtime_memclr(v, s->npages<<PageShift);
		MHeap_Free(&mheap, s, 1);
	} else {
		// Small object.
		c = m->mcache;
		size = class_to_size[sizeclass];
		if(size > (int32)sizeof(uintptr))
			((uintptr*)v)[1] = 1;	// mark as "needs to be zeroed"
		if(prof)
			MProf_Free(v, size);
		mstats.alloc -= size;
		mstats.by_size[sizeclass].nfree++;
		MCache_Free(c, v, sizeclass, size);
	}
	__sync_bool_compare_and_swap(&m->mallocing, 1, 0);

	if(__sync_bool_compare_and_swap(&m->gcing, 1, 0))
		__go_run_goroutine_gc(1);
}

int32
mlookup(void *v, byte **base, uintptr *size, MSpan **sp, uint32 **ref)
{
	uintptr n, nobj, i;
	byte *p;
	MSpan *s;

	mstats.nlookup++;
	s = MHeap_LookupMaybe(&mheap, (uintptr)v>>PageShift);
	if(sp)
		*sp = s;
	if(s == nil) {
		if(base)
			*base = nil;
		if(size)
			*size = 0;
		if(ref)
			*ref = 0;
		return 0;
	}

	p = (byte*)((uintptr)s->start<<PageShift);
	if(s->sizeclass == 0) {
		// Large object.
		if(base)
			*base = p;
		if(size)
			*size = s->npages<<PageShift;
		if(ref)
			*ref = &s->gcref0;
		return 1;
	}

	if((byte*)v >= (byte*)s->gcref) {
		// pointers into the gc ref counts
		// do not count as pointers.
		return 0;
	}

	n = class_to_size[s->sizeclass];
	i = ((byte*)v - p)/n;
	if(base)
		*base = p + i*n;
	if(size)
		*size = n;

	// good for error checking, but expensive
	if(0) {
		nobj = (s->npages << PageShift) / (n + RefcountOverhead);
		if((byte*)s->gcref < p || (byte*)(s->gcref+nobj) > p+(s->npages<<PageShift)) {
			printf("odd span state=%d span=%p base=%p sizeclass=%d n=%llu size=%llu npages=%llu\n",
				s->state, s, p, s->sizeclass, (unsigned long long)nobj, (unsigned long long)n, (unsigned long long)s->npages);
			printf("s->base sizeclass %d v=%p base=%p gcref=%p blocksize=%llu nobj=%llu size=%llu end=%p end=%p\n",
				s->sizeclass, v, p, s->gcref, (unsigned long long)s->npages<<PageShift,
				(unsigned long long)nobj, (unsigned long long)n, s->gcref + nobj, p+(s->npages<<PageShift));
			throw("bad gcref");
		}
	}
	if(ref)
		*ref = &s->gcref[i];

	return 1;
}

MCache*
allocmcache(void)
{
	MCache *c;

	c = FixAlloc_Alloc(&mheap.cachealloc);

	// Clear the free list used by FixAlloc; assume the rest is zeroed.
	c->list[0].list = nil;

	mstats.mcache_inuse = mheap.cachealloc.inuse;
	mstats.mcache_sys = mheap.cachealloc.sys;
	return c;
}

void
mallocinit(void)
{
	InitSizes();
	MHeap_Init(&mheap, SysAlloc);
	m->mcache = allocmcache();

	// See if it works.
	__go_free(__go_alloc(1));
}

// Runtime stubs.

void*
mal(uintptr n)
{
	return mallocgc(n, 0, 1, 1);
}

func Alloc(n uintptr) (p *byte) {
	p = __go_alloc(n);
}

func Free(p *byte) {
	__go_free(p);
}

func Lookup(p *byte) (base *byte, size uintptr) {
	mlookup(p, &base, &size, nil, nil);
}

func GC() {
	gc(1);
}

func SetFinalizer(obj Eface, finalizer Eface) {
	byte *base;
	uintptr size;
	const FuncType *ft;

	if(obj == nil) {
		printf("runtime.SetFinalizer: first argument is nil interface\n");
	throw:
		throw("runtime.SetFinalizer");
	}
	if(obj->__type_descriptor->__code != GO_PTR) {
		printf("runtime.SetFinalizer: first argument is %.*s, not pointer\n", (int)obj->__type_descriptor->__reflection->__length, obj->__type_descriptor->__reflection->__data);
		goto throw;
	}
	if(!mlookup(obj->__object, &base, &size, nil, nil) || obj->__object != base) {
		printf("runtime.SetFinalizer: pointer not at beginning of allocated block\n");
		goto throw;
	}
	ft = nil;
	if(finalizer != nil) {
		if(finalizer->__type_descriptor->__code != GO_FUNC) {
		badfunc:
		  printf("runtime.SetFinalizer: second argument is %.*s, not func(%.*s)\n", (int)finalizer->__type_descriptor->__reflection->__length, finalizer->__type_descriptor->__reflection->__data, (int)obj->__type_descriptor->__reflection->__length, obj->__type_descriptor->__reflection->__data);
			goto throw;
		}
		ft = (const FuncType*)finalizer->__type_descriptor;
		if(ft->__dotdotdot || ft->__in.__count != 1 || !__go_type_descriptors_equal(*(Type**)ft->__in.__values, obj->__type_descriptor))
			goto badfunc;

		if(getfinalizer(obj->__object, 0)) {
			printf("runtime.SetFinalizer: finalizer already set");
			goto throw;
		}
	}
	addfinalizer(obj->__object, finalizer ? *(void**)finalizer->__object : nil, ft);
}
